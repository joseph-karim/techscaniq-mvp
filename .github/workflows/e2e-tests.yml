name: E2E Pipeline Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * *' # Nightly at 2 AM

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: techscaniq_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps ${{ matrix.browser }}
      
      - name: Setup test environment
        run: |
          cp .env.test .env
          npm run db:test:prepare
          npm run test:seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/techscaniq_test
          REDIS_URL: redis://localhost:6379
      
      - name: Start services
        run: |
          npm run dev:test &
          npm run api:server &
          npm run workers:all &
          npx wait-on http://localhost:3000 http://localhost:4000 --timeout 60000
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/techscaniq_test
          REDIS_URL: redis://localhost:6379
      
      - name: Run E2E tests
        run: |
          npm run test:e2e -- --project=${{ matrix.browser }}
        env:
          TEST_BROWSER: ${{ matrix.browser }}
          HEADLESS: true
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/techscaniq_test
          REDIS_URL: redis://localhost:6379
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
            coverage/
      
      - name: Upload performance reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: performance-reports/
      
      - name: Publish test report
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: E2E Test Results - ${{ matrix.browser }}
          path: 'test-results/*.xml'
          reporter: jest-junit
  
  visual-regression:
    runs-on: ubuntu-latest
    needs: e2e-tests
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup test environment
        run: |
          cp .env.test .env
          npm run db:test:prepare
      
      - name: Start services
        run: |
          npm run dev:test &
          npm run api:server &
          npx wait-on http://localhost:3000 http://localhost:4000 --timeout 60000
      
      - name: Run visual tests
        run: npm run test:visual
        env:
          ARGOS_TOKEN: ${{ secrets.ARGOS_TOKEN }}
      
      - name: Upload to Argos CI
        if: always()
        run: npm run argos:upload
        env:
          ARGOS_TOKEN: ${{ secrets.ARGOS_TOKEN }}
  
  performance-benchmark:
    runs-on: ubuntu-latest
    needs: e2e-tests
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run performance tests
        run: npm run test:performance
      
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-benchmark
          path: performance-reports/
      
      - name: Comment PR with performance results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('performance-reports/performance-summary.json', 'utf8'));
            
            const comment = `## Performance Test Results
            
            | Test | Avg Duration | P95 | P99 |
            |------|-------------|-----|-----|
            ${Object.entries(report.profiles).map(([name, stats]) => 
              `| ${name} | ${stats.avgDuration}ms | ${stats.p95Duration}ms | ${stats.p99Duration}ms |`
            ).join('\n')}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
  
  integration-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: techscaniq_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/techscaniq_test
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: integration
  
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Run security audit
        run: npm audit --production
      
      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'TechScanIQ'
          path: '.'
          format: 'ALL'
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: reports/